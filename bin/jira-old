#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

error_reporting(E_ALL);
ini_set('display_errors', 1);

use Technodelight\Jira\Configuration\Configuration;
use Technodelight\Jira\Configuration\GlobalConfiguration;
use Technodelight\Jira\Api\Client;
use Technodelight\Jira\Api\Issue;
use Technodelight\Jira\Api\SearchResultList;
use Technodelight\Jira\Helper\GitBranchnameGenerator;
use Technodelight\Jira\Helper\GitHelper;
use Technodelight\Jira\Helper\DateHelper;

function tabulate($string, $pad = 4)
{
    return implode(
        PHP_EOL . str_repeat(' ', $pad),
        explode(PHP_EOL, $string)
    );
}

function render($template, $variables)
{
    $keys = array_map(
        function($key) {
            return sprintf('{{ %s }}', $key);
        },
        array_keys($variables)
    );

    return strtr($template, array_combine($keys, array_values($variables)));
}

function renderDefect(Issue $issue)
{
$template = <<<EOL
description:
    {{ description }}
environment: {{ environment }}
reporter: {{ reporter }}

EOL;

    return render(
        $template,
        [
            'description' => tabulate(wordwrap($issue->description())),
            'environment' => $issue->environment(),
            'reporter' => $issue->reporter(),
        ]
    );
}

function renderIssue(GitHelper $git, Issue $issue)
{
$template = <<<EOL
{{ issueNumber }}: {{ issueType }} (estimate: {{ estimate }}, spent: {{ spent }})
    {{ summary }}
{{ additionalInfo }}
link:
    {{ url }}
branches:
    {{ branches }}

EOL;
    $branchList = $git->branches($issue->ticketNumber());
    if (empty($branchList)) {
        $generator = new GitBranchnameGenerator;
        $branches = $generator->fromIssue($issue) . ' (generated)';
    } else {
        $branches = implode(PHP_EOL . '    ', $branchList);
    }

    $additionalInfo = '';
    if ($issue->issueType() == 'Defect') {
        $additionalInfo = renderDefect($issue);
    }
    $dateHelper = new DateHelper;

    $content = render(
        $template,
        [
            'issueNumber' => $issue->ticketNumber(),
            'issueType' => $issue->issueType(),
            'summary' => tabulate(wordwrap($issue->summary())),
            'estimate' => $dateHelper->secondsToHuman($issue->estimate()),
            'spent' => $dateHelper->secondsToHuman($issue->timeSpent()),
            'additionalInfo' => $additionalInfo,
            'branches' => $branches,
            'url' => $issue->url(),
        ]
    );

    return $content . PHP_EOL;
}

class Arguments
{
    /**
     * @var array
     */
    private $args;

    public function __construct()
    {
        $this->args = isset($_SERVER['argv']) ? $_SERVER['argv'] : [];
    }

    public function scriptName()
    {
        return $this->argument(0);
    }

    public function firstArgument()
    {
        return $this->argument(1);
    }

    private function argument($index)
    {
        return isset($this->args[$index]) ? $this->args[$index] : null;
    }
}

function controller(Configuration $config, Arguments $arguments, Client $client)
{
    $git = new GitHelper;

    switch ($arguments->firstArgument()) {
        case 'todo':
            $issues = $client->todoIssues($config->project());
            // render
            foreach ($issues as $issue) {
                print renderIssue($git, $issue) . PHP_EOL;
            }
            return 0;

        case 'inprogess':
        case 'in-progess':
        default:
            $issues = $client->inprogressIssues($config->project());
            // render
            foreach ($issues as $issue) {
                print renderIssue($git, $issue) . PHP_EOL;
            }
            return 0;
    }
}

try {

    $git = new GitHelper;
    $arguments = new Arguments;

    // init configuration
    $config = GlobalConfiguration::initFromDirectory(getenv('HOME'));
    $projectConfig = Configuration::initFromDirectory($git->topLevelDirectory());
    $config->merge($projectConfig);

    // init client
    $client = new Client($config);

    // retrieve issues
    $returnCode = controller($config, $arguments, $client);

    exit($returnCode);

} catch (Exception $exception) {
    print $exception . PHP_EOL;
    exit($exception->getCode() ?: 1);
}
